(load "interval.scm")

(define (fast-mul-interval a b)
  (let ((l1 (lower-bound a))
        (l2 (lower-bound b))
        (u1 (upper-bound a))
        (u2 (upper-bound b)))
    (if (> l1 0)
      (if (> l2 0)
        (make-interval (* l1 l2) (* u1 u2))
        (if (> u2 0)
          (make-interval (* u1 l2) (* u1 u2))
          (make-interval (* u1 u2) (* l1 u2))))
      (if (> u1 0)
        (if (> l2 0)
          (make-interval (* l1 u2) (* u1 u2))
          (if (> u2 0)
            (make-interval
              (min (* l1 u2) (* l2 u1))
              (max (* u1 u2) (* l1 l2)))
            (make-interval (* u1 u2) (* l1 u2))))
        (if (> l2 0)
          (make-interval (* l1 u2) (* u1 l2))
          (if (> u2 0)
            (make-interval (* l1 u2) (* u1 l1))
            (make-interval (* l1 l2) (* u1 u2))))))))

(fast-mul-interval 
  (make-interval -1 3)
  (make-interval -5 1))
